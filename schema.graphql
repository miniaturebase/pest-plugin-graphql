type Query {
    rand: Int!
}

type Mutation {
    sum(numbers: [Int!]!): Int!
}

type Foo {
    x: String
}

type Bar {
    y: String
}

union BazUnion = Foo | Bar

scalar Date

input FooInput {
    x: String!
}

interface FooInterface {
    x: String
}

enum FooEnum {
    Bar
    Baz
}
